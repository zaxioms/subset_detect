"""This type stub file was generated by pyright."""@<Expression>class :	...@Pclass :	...@<Expression>class :	...@ȝclass :	...J: <Expression>@8class :	...D = <Expression>@<Expression>class :	...@<Expression>class :	...@<Expression>class :	...@<Expression>class :	...@9class :	...@<Expression>class :	...cO: <Expression>ƽ = <Expression>@<Expression>class :	...f = AC: <Expression>@Eclass :	...N = <Expression>L: <Expression>qn = <Expression>Fm = <Expression>N0 = <Expression>S = <Expression>B = *<Expression>d = <Expression>ß: <Expression>@<Expression>class :	...z: <Expression>_: <Expression>@<Expression>class :	...@<Expression>@<Expression>@<Expression>@<Expression>@<Expression>class :	...j: - <Expression>w: <Expression>@<Expression>class :	...@<Expression>class :	...@<Expression>class :	...@<Expression>class :	...@<Expression>class :	...@<Expression>class :	...@5class :	...@<Expression>class :	...X: <Expression>j = <Expression>@Trclass :	...@<Expression>class :	...@<Expression>class :	...@<Expression>@2 < <Expression>class :	...@<Expression>@<Expression>@<Expression>class :	...@8 < <Expression>@8 < <Expression>@8 < <Expression>@8 < <Expression>@8 < <Expression>@<Expression>@<Expression>class :	...@<Expression>class :	...@<Expression>class :	...@bclass :	...@<Expression>class :	...@<Expression>class :	...@<Expression>class :	...@<Expression>class :	...@<Expression>class :	...@2class :	...H = <Expression>H = <Expression>H = <Expression>@rclass :	...@<Expression>class :	...@<Expression>class :	...@<Expression>class :	...@<Expression>class :	...YT: 0YD: 0@<Expression>class :	...@Mcclass :	...met: <Expression>block_id = get_global_id(1)dst_offset0 = block_id * BLOCK_SIZEsrc_offset0 = 0plane_sz = CONCAT(DST_STEP_, dim) / BLOCK_SIZEblock_id = block_id - CONCAT(idx_, dim) * plane_szmet: <Expression>index = get_global_id(0)tmp = get_global_size(0)index = get_global_id(0)tmp = get_global_size(0)index = get_global_id(0)index = get_global_id(0)x = get_global_id(0)y = get_global_id(1) * NUMindex = x * cols + yx = get_global_id(0)y = get_global_id(1) * NUMindex = x * cols + yrow_gid = get_group_id(0)lid = get_local_id(0)dot0 = dot1 = dot2 = dot3 = Dtype4(0)row_gid = get_group_id(0)lid = get_local_id(0)dot0 = dot1 = dot2 = dot3 = Dtype4(0)row_gid = get_group_id(0)lid = get_local_id(0)result = <Expression>row_gid = get_group_id(0)lid = get_local_id(0)result = result + offrdot0 = Dtype4(0)met: <Expression>index = get_global_id(0)if _coordC.x + get_local_id(0) < N:	...coordDst = int2(group_x * TILE_N * _C_step, group_y * TILE_M)coordC = coordDstףp = <Expression>best_disp = (*bestDisp, best_cost) = *bestCostc = cost[0]thresh = best_cost + best_cost * uniquenessRatio / 100notUniq = <Expression>head = *h % WSZidx = mad24(y + WSZ2 * 2 * nthread - 1, cols, x + WSZ2 * 1 - 2 * nthread)left = leftptr + idxright = rightptr + idx - dcostdiff = 0idx = mad24(y - WSZ2 - 1, cols, x - WSZ2 - 1)left = leftptr + idxright = rightptr + idx - didx2 = WSZ * colscorrner1 = (abs(left[0] - right[0]), corrner2) = (abs(left[WSZ] - right[WSZ]), corrner3) = (abs(left[idx2] - right[idx2]), corrner4) = abs(left[idx2 + WSZ] - right[idx2 + WSZ])