"""
This type stub file was generated by pyright.
"""

import enum
import torch
from typing import Type

if torch.distributed.rpc.is_available():
    ...
class Module(object):
    def __init__(self, name, members) -> None:
        ...
    
    def __getattr__(self, name):
        ...
    


class EvalEnv(object):
    env = ...
    def __init__(self, rcb) -> None:
        ...
    
    def __getitem__(self, name):
        ...
    


def get_signature(fn, rcb, loc, is_method):
    ...

def is_function_or_method(the_callable):
    ...

def is_vararg(the_callable):
    ...

def get_param_names(fn, n_args):
    ...

def check_fn(fn, loc):
    ...

def parse_type_line(type_line, rcb, loc):
    """Parses a type annotation specified as a comment.

    Example inputs:
        # type: (Tensor, torch.Tensor) -> Tuple[Tensor]
        # type: (Tensor, Tuple[Tensor, Tensor]) -> Tensor
    """
    ...

def get_type_line(source):
    """Tries to find the line containing a comment with the type annotation."""
    ...

def split_type_line(type_line):
    """Splits the comment with the type annotation into parts for argument and return types.

    For example, for an input of:
        # type: (Tensor, torch.Tensor) -> Tuple[Tensor, Tensor]

    This function will return:
        ("(Tensor, torch.Tensor)", "Tuple[Tensor, Tensor]")

    """
    ...

def try_real_annotations(fn, loc):
    """Tries to use the Py3.5+ annotation syntax to get the type."""
    ...

def get_enum_value_type(e: Type[enum.Enum], loc):
    ...

def try_ann_to_type(ann, loc):
    ...

def ann_to_type(ann, loc):
    ...

