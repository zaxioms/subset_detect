"""
This type stub file was generated by pyright.
"""

from torch.distributions.exp_family import ExponentialFamily
from torch.distributions.utils import lazy_property

"""
This type stub file was generated by pyright.
"""
class ContinuousBernoulli(ExponentialFamily):
    r"""
    Creates a continuous Bernoulli distribution parameterized by :attr:`probs`
    or :attr:`logits` (but not both).

    The distribution is supported in [0, 1] and parameterized by 'probs' (in
    (0,1)) or 'logits' (real-valued). Note that, unlike the Bernoulli, 'probs'
    does not correspond to a probability and 'logits' does not correspond to
    log-odds, but the same names are used due to the similarity with the
    Bernoulli. See [1] for more details.

    Example::

        >>> m = ContinuousBernoulli(torch.tensor([0.3]))
        >>> m.sample()
        tensor([ 0.2538])

    Args:
        probs (Number, Tensor): (0,1) valued parameters
        logits (Number, Tensor): real valued parameters whose sigmoid matches 'probs'

    [1] The continuous Bernoulli: fixing a pervasive error in variational
    autoencoders, Loaiza-Ganem G and Cunningham JP, NeurIPS 2019.
    https://arxiv.org/abs/1907.06845
    """
    arg_constraints = ...
    support = ...
    _mean_carrier_measure = ...
    has_rsample = ...
    def __init__(self, probs=..., logits=..., lims=..., validate_args=...) -> None:
        ...
    
    def expand(self, batch_shape, _instance=...):
        ...
    
    @property
    def mean(self):
        ...
    
    @property
    def stddev(self):
        ...
    
    @property
    def variance(self):
        ...
    
    @lazy_property
    def logits(self):
        ...
    
    @lazy_property
    def probs(self):
        ...
    
    @property
    def param_shape(self):
        ...
    
    def sample(self, sample_shape=...):
        ...
    
    def rsample(self, sample_shape=...):
        ...
    
    def log_prob(self, value):
        ...
    
    def cdf(self, value):
        ...
    
    def icdf(self, value):
        ...
    
    def entropy(self):
        ...
    


