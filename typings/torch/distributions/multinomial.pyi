"""
This type stub file was generated by pyright.
"""

from torch.distributions.distribution import Distribution
from torch.distributions import constraints

"""
This type stub file was generated by pyright.
"""
class Multinomial(Distribution):
    r"""
    Creates a Multinomial distribution parameterized by :attr:`total_count` and
    either :attr:`probs` or :attr:`logits` (but not both). The innermost dimension of
    :attr:`probs` indexes over categories. All other dimensions index over batches.

    Note that :attr:`total_count` need not be specified if only :meth:`log_prob` is
    called (see example below)

    .. note:: :attr:`probs` must be non-negative, finite and have a non-zero sum,
              and it will be normalized to sum to 1.

    -   :meth:`sample` requires a single shared `total_count` for all
        parameters and samples.
    -   :meth:`log_prob` allows different `total_count` for each parameter and
        sample.

    Example::

        >>> m = Multinomial(100, torch.tensor([ 1., 1., 1., 1.]))
        >>> x = m.sample()  # equal probability of 0, 1, 2, 3
        tensor([ 21.,  24.,  30.,  25.])

        >>> Multinomial(probs=torch.tensor([1., 1., 1., 1.])).log_prob(x)
        tensor([-4.1338])

    Args:
        total_count (int): number of trials
        probs (Tensor): event probabilities
        logits (Tensor): event log probabilities
    """
    arg_constraints = ...
    @property
    def mean(self):
        ...
    
    @property
    def variance(self):
        ...
    
    def __init__(self, total_count=..., probs=..., logits=..., validate_args=...) -> None:
        ...
    
    def expand(self, batch_shape, _instance=...):
        ...
    
    @constraints.dependent_property
    def support(self):
        ...
    
    @property
    def logits(self):
        ...
    
    @property
    def probs(self):
        ...
    
    @property
    def param_shape(self):
        ...
    
    def sample(self, sample_shape=...):
        ...
    
    def log_prob(self, value):
        ...
    


