"""
This type stub file was generated by pyright.
"""

import torch
from torch.distributions.distribution import Distribution
from torch.distributions.utils import lazy_property

"""
This type stub file was generated by pyright.
"""
_I0_COEF_SMALL = [1, 3.5156229, 3.0899424, 1.2067492, 0.2659732, 0.0360768, 0.0045813]
_I0_COEF_LARGE = [0.39894228, 0.01328592, 0.00225319, - 0.00157565, 0.00916281, - 0.02057706, 0.02635537, - 0.01647633, 0.00392377]
_I1_COEF_SMALL = [0.5, 0.87890594, 0.51498869, 0.15084934, 0.02658733, 0.00301532, 0.00032411]
_I1_COEF_LARGE = [0.39894228, - 0.03988024, - 0.00362018, 0.00163801, - 0.01031555, 0.02282967, - 0.02895312, 0.01787654, - 0.00420059]
_COEF_SMALL = [_I0_COEF_SMALL, _I1_COEF_SMALL]
_COEF_LARGE = [_I0_COEF_LARGE, _I1_COEF_LARGE]
class VonMises(Distribution):
    """
    A circular von Mises distribution.

    This implementation uses polar coordinates. The ``loc`` and ``value`` args
    can be any real number (to facilitate unconstrained optimization), but are
    interpreted as angles modulo 2 pi.

    Example::
        >>> m = dist.VonMises(torch.tensor([1.0]), torch.tensor([1.0]))
        >>> m.sample() # von Mises distributed with loc=1 and concentration=1
        tensor([1.9777])

    :param torch.Tensor loc: an angle in radians.
    :param torch.Tensor concentration: concentration parameter
    """
    arg_constraints = ...
    support = ...
    has_rsample = ...
    def __init__(self, loc, concentration, validate_args=...) -> None:
        ...
    
    def log_prob(self, value):
        ...
    
    @torch.no_grad()
    def sample(self, sample_shape=...):
        """
        The sampling algorithm for the von Mises distribution is based on the following paper:
        Best, D. J., and Nicholas I. Fisher.
        "Efficient simulation of the von Mises distribution." Applied Statistics (1979): 152-157.
        """
        ...
    
    def expand(self, batch_shape):
        ...
    
    @property
    def mean(self):
        """
        The provided mean is the circular one.
        """
        ...
    
    @lazy_property
    def variance(self):
        """
        The provided variance is the circular one.
        """
        ...
    


