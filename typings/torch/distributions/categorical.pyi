"""
This type stub file was generated by pyright.
"""

from torch.distributions import constraints
from torch.distributions.distribution import Distribution
from torch.distributions.utils import lazy_property

"""
This type stub file was generated by pyright.
"""
class Categorical(Distribution):
    r"""
    Creates a categorical distribution parameterized by either :attr:`probs` or
    :attr:`logits` (but not both).

    .. note::
        It is equivalent to the distribution that :func:`torch.multinomial`
        samples from.

    Samples are integers from :math:`\{0, \ldots, K-1\}` where `K` is ``probs.size(-1)``.

    If :attr:`probs` is 1D with length-`K`, each element is the relative
    probability of sampling the class at that index.

    If :attr:`probs` is 2D, it is treated as a batch of relative probability
    vectors.

    .. note:: :attr:`probs` must be non-negative, finite and have a non-zero sum,
              and it will be normalized to sum to 1.

    See also: :func:`torch.multinomial`

    Example::

        >>> m = Categorical(torch.tensor([ 0.25, 0.25, 0.25, 0.25 ]))
        >>> m.sample()  # equal probability of 0, 1, 2, 3
        tensor(3)

    Args:
        probs (Tensor): event probabilities
        logits (Tensor): event log-odds
    """
    arg_constraints = ...
    has_enumerate_support = ...
    def __init__(self, probs=..., logits=..., validate_args=...) -> None:
        ...
    
    def expand(self, batch_shape, _instance=...):
        ...
    
    @constraints.dependent_property
    def support(self):
        ...
    
    @lazy_property
    def logits(self):
        ...
    
    @lazy_property
    def probs(self):
        ...
    
    @property
    def param_shape(self):
        ...
    
    @property
    def mean(self):
        ...
    
    @property
    def variance(self):
        ...
    
    def sample(self, sample_shape=...):
        ...
    
    def log_prob(self, value):
        ...
    
    def entropy(self):
        ...
    
    def enumerate_support(self, expand=...):
        ...
    


