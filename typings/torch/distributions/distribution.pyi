"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
class Distribution(object):
    r"""
    Distribution is the abstract base class for probability distributions.
    """
    has_rsample = ...
    has_enumerate_support = ...
    _validate_args = ...
    support = ...
    arg_constraints = ...
    @staticmethod
    def set_default_validate_args(value):
        ...
    
    def __init__(self, batch_shape=..., event_shape=..., validate_args=...) -> None:
        ...
    
    def expand(self, batch_shape, _instance=...):
        """
        Returns a new distribution instance (or populates an existing instance
        provided by a derived class) with batch dimensions expanded to
        `batch_shape`. This method calls :class:`~torch.Tensor.expand` on
        the distribution's parameters. As such, this does not allocate new
        memory for the expanded distribution instance. Additionally,
        this does not repeat any args checking or parameter broadcasting in
        `__init__.py`, when an instance is first created.

        Args:
            batch_shape (torch.Size): the desired expanded size.
            _instance: new instance provided by subclasses that
                need to override `.expand`.

        Returns:
            New distribution instance with batch dimensions expanded to
            `batch_size`.
        """
        ...
    
    @property
    def batch_shape(self):
        """
        Returns the shape over which parameters are batched.
        """
        ...
    
    @property
    def event_shape(self):
        """
        Returns the shape of a single sample (without batching).
        """
        ...
    
    @property
    def arg_constraints(self):
        """
        Returns a dictionary from argument names to
        :class:`~torch.distributions.constraints.Constraint` objects that
        should be satisfied by each argument of this distribution. Args that
        are not tensors need not appear in this dict.
        """
        ...
    
    @property
    def support(self):
        """
        Returns a :class:`~torch.distributions.constraints.Constraint` object
        representing this distribution's support.
        """
        ...
    
    @property
    def mean(self):
        """
        Returns the mean of the distribution.
        """
        ...
    
    @property
    def variance(self):
        """
        Returns the variance of the distribution.
        """
        ...
    
    @property
    def stddev(self):
        """
        Returns the standard deviation of the distribution.
        """
        ...
    
    def sample(self, sample_shape=...):
        """
        Generates a sample_shape shaped sample or sample_shape shaped batch of
        samples if the distribution parameters are batched.
        """
        ...
    
    def rsample(self, sample_shape=...):
        """
        Generates a sample_shape shaped reparameterized sample or sample_shape
        shaped batch of reparameterized samples if the distribution parameters
        are batched.
        """
        ...
    
    def sample_n(self, n):
        """
        Generates n samples or n batches of samples if the distribution
        parameters are batched.
        """
        ...
    
    def log_prob(self, value):
        """
        Returns the log of the probability density/mass function evaluated at
        `value`.

        Args:
            value (Tensor):
        """
        ...
    
    def cdf(self, value):
        """
        Returns the cumulative density/mass function evaluated at
        `value`.

        Args:
            value (Tensor):
        """
        ...
    
    def icdf(self, value):
        """
        Returns the inverse cumulative density/mass function evaluated at
        `value`.

        Args:
            value (Tensor):
        """
        ...
    
    def enumerate_support(self, expand=...):
        """
        Returns tensor containing all values supported by a discrete
        distribution. The result will enumerate over dimension 0, so the shape
        of the result will be `(cardinality,) + batch_shape + event_shape`
        (where `event_shape = ()` for univariate distributions).

        Note that this enumerates over all batched tensors in lock-step
        `[[0, 0], [1, 1], ...]`. With `expand=False`, enumeration happens
        along dim 0, but with the remaining batch dimensions being
        singleton dimensions, `[[0], [1], ..`.

        To iterate over the full Cartesian product use
        `itertools.product(m.enumerate_support())`.

        Args:
            expand (bool): whether to expand the support over the
                batch dims to match the distribution's `batch_shape`.

        Returns:
            Tensor iterating over dimension 0.
        """
        ...
    
    def entropy(self):
        """
        Returns entropy of distribution, batched over batch_shape.

        Returns:
            Tensor of shape batch_shape.
        """
        ...
    
    def perplexity(self):
        """
        Returns perplexity of distribution, batched over batch_shape.

        Returns:
            Tensor of shape batch_shape.
        """
        ...
    
    def __repr__(self):
        ...
    


