"""
This type stub file was generated by pyright.
"""

from .graph import Graph
from typing import Any, Callable, Dict, Iterable, NoReturn, Optional, Tuple, Union
from .node import Argument, Node

class TracerBase:
    graph: Graph
    def create_node(self, kind: str, target: Union[str, Callable], args: Tuple[Argument, ...], kwargs: Dict[str, Argument], name: Optional[str] = ...) -> Node:
        """
        Inserts a graph node given target, args, kwargs, and name.

        This method can be overridden to do extra checking, validation, or
        modification of values used in node creation. For example, one might
        want to disallow in-place operations from being recorded.
        """
        ...
    
    def create_arg(self, a: Any) -> Argument:
        """
        A method that lowers the objects seen as arguments during symbolic evaluation
        into Argument types that can be stored in IR.

        Can be override to support more trace-specific types.
        """
        ...
    


class GraphAppendingTracer(TracerBase):
    def __init__(self, graph: Graph) -> None:
        ...
    


class TraceError(ValueError):
    ...


class Proxy:
    def __init__(self, node: Node, tracer: Optional[TracerBase] = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __getattr__(self, k) -> Attribute:
        ...
    
    def __call__(self, *args, **kwargs) -> Proxy:
        ...
    
    def __iter__(self) -> Iterable[Proxy]:
        ...
    
    def __bool__(self) -> NoReturn:
        ...
    
    def __torch_function__(self, orig_method, types, args=..., kwargs=...):
        ...
    


class Attribute(Proxy):
    def __init__(self, root: Proxy, attr: str) -> None:
        ...
    
    @property
    def node(self):
        ...
    
    def __call__(self, *args, **kwargs):
        ...
    


