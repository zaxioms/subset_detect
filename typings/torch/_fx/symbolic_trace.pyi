"""
This type stub file was generated by pyright.
"""

import inspect
import torch
from typing import Any
from .node import Argument
from .graph_module import GraphModule
from .proxy import TracerBase

HAS_VARSTUFF = inspect.CO_VARARGS | inspect.CO_VARKEYWORDS
class Tracer(TracerBase):
    def __init__(self) -> None:
        ...
    
    def create_arg(self, a: Any) -> Argument:
        ...
    
    def is_leaf_module(self, m: torch.nn.Module, module_qualified_name: str) -> bool:
        """
        A method to specify whether a given `nn.Module` is a "leaf" module.

        Leaf modules are the atomic units that appear in
        the IR, referenced by `call_module` calls. By default,
        Modules in the PyTorch standard library namespace (torch.nn)
        are leaf modules. All other modules are traced through and
        their constituent ops are recorded, unless specified otherwise
        via this parameter.

        Args
        m - The module itself
        module_qualified_name - The path to root of this module. For example,
            if you have a module hierarchy where submodule `foo` contains
            submodule `bar`, which contains submodule `baz`, that module will
            appear with the qualified name `foo.bar.baz` here.
        """
        ...
    
    def trace(self, root: torch.nn.Module) -> GraphModule:
        ...
    


def symbolic_trace(root: torch.nn.Module) -> GraphModule:
    ...

