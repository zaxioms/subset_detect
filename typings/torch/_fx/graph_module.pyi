"""
This type stub file was generated by pyright.
"""

import torch
import linecache
from typing import Any, Dict, List, Type, Union
from .graph import Graph

_next_id = 0
def exec_with_source(src: str, globals: Dict[str, Any]):
    ...

_eval_cache: Dict[str, List[str]] = {  }
_orig_getlines = linecache.getlines
def patched_getline(*args, **kwargs):
    ...

def deserialize_graphmodule(body: dict) -> torch.nn.Module:
    """
    Deserialize a GraphModule given the dictionary of the original module,
    using the code to reconstruct the graph. We delete the actual graph before
    saving the dictionary so that changes to the in-memory graph format do not
    get serialized.
    """
    class CodeOnlyModule(torch.nn.Module):
        ...
    
    
    class KeepModules(Tracer):
        ...
    
    

class GraphModule(torch.nn.Module):
    """
    GraphModule is an nn.Module generated from an fx.Graph. GraphModule has
    important attributes:

        graph : The graph from which this GraphModule was generated
        code : The Python source code for the function generated from `graph`
        forward : The Python method generated from `graph`

    Note that when `graph` is reassigned, `code` and `forward` will be automatically
    regenerated.
    """
    def __new__(cls: Type[GraphModule], *args, **kwargs):
        class GraphModuleImpl(cls):
            ...
        
        
    
    def __init__(self, root: Union[torch.nn.Module, Dict[str, Any]], graph: Graph) -> None:
        """
        Construct a GraphModule.
        root - `root` can either be an nn.Module instance or a Dict mapping strings to any attribute type.
               - In the case that `root` is a Module, any references to Module-based objects (via qualified
                 name) in the Graph's Nodes' `target` field will be copied over from the respective place
                 within `root`'s Module hierarchy into the GraphModule's module hierarchy.
               - In the case that `root` is a dict, the qualified name found in a Node's `target` will be
                 looked up directly in the dict's keys. The object mapped to by the Dict will be copied
                 over into the appropriate place within the GraphModule's module hierarchy.
        graph - `graph` contains the nodes this GraphModule should use for code generation
        """
        ...
    
    __jit_unused_properties__ = ...
    @property
    def graph(self):
        ...
    
    @graph.setter
    def graph(self, val) -> None:
        ...
    
    def __reduce__(self):
        ...
    
    def __deepcopy__(self, memo):
        ...
    
    def __copy__(self):
        ...
    
    def __str__(self) -> str:
        ...
    


