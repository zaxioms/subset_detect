"""
This type stub file was generated by pyright.
"""

import torch.nn as nn
import torch.nn.qat as nnqat

"""
This type stub file was generated by pyright.
"""
class _ConvBnNd(nn.modules.conv._ConvNd):
    _version = ...
    def __init__(self, in_channels, out_channels, kernel_size, stride, padding, dilation, transposed, output_padding, groups, bias, padding_mode, eps=..., momentum=..., freeze_bn=..., qconfig=...) -> None:
        ...
    
    def reset_running_stats(self):
        ...
    
    def reset_bn_parameters(self):
        ...
    
    def reset_parameters(self):
        ...
    
    def update_bn_stats(self):
        ...
    
    def freeze_bn_stats(self):
        ...
    
    def extra_repr(self):
        ...
    
    def forward(self, input):
        ...
    
    def train(self, mode=...):
        """
        Batchnorm's training behavior is using the self.training flag. Prevent
        changing it if BN is frozen. This makes sure that calling `model.train()`
        on a model with a frozen BN will behave properly.
        """
        ...
    
    @classmethod
    def from_float(cls, mod):
        r"""Create a qat module from a float module or qparams_dict

            Args: `mod` a float module, either produced by torch.quantization utilities
            or directly from user
        """
        ...
    


class ConvBn2d(_ConvBnNd, nn.Conv2d):
    r"""
    A ConvBn2d module is a module fused from Conv2d and BatchNorm2d,
    attached with FakeQuantize modules for weight,
    used in quantization aware training.

    We combined the interface of :class:`torch.nn.Conv2d` and
    :class:`torch.nn.BatchNorm2d`.

    Implementation details: https://arxiv.org/pdf/1806.08342.pdf section 3.2.2

    Similar to :class:`torch.nn.Conv2d`, with FakeQuantize modules initialized
    to default.

    Attributes:
        freeze_bn:
        weight_fake_quant: fake quant module for weight

    """
    _FLOAT_MODULE = ...
    def __init__(self, in_channels, out_channels, kernel_size, stride=..., padding=..., dilation=..., groups=..., bias=..., padding_mode=..., eps=..., momentum=..., freeze_bn=..., qconfig=...) -> None:
        ...
    


class ConvBnReLU2d(ConvBn2d):
    r"""
    A ConvBnReLU2d module is a module fused from Conv2d, BatchNorm2d and ReLU,
    attached with FakeQuantize modules for weight,
    used in quantization aware training.

    We combined the interface of :class:`torch.nn.Conv2d` and
    :class:`torch.nn.BatchNorm2d` and :class:`torch.nn.ReLU`.

    Implementation details: https://arxiv.org/pdf/1806.08342.pdf

    Similar to `torch.nn.Conv2d`, with FakeQuantize modules initialized to
    default.

    Attributes:
        weight_fake_quant: fake quant module for weight

    """
    _FLOAT_MODULE = ...
    def __init__(self, in_channels, out_channels, kernel_size, stride=..., padding=..., dilation=..., groups=..., bias=..., padding_mode=..., eps=..., momentum=..., freeze_bn=..., qconfig=...) -> None:
        ...
    
    def forward(self, input):
        ...
    
    @classmethod
    def from_float(cls, mod):
        ...
    


class ConvReLU2d(nnqat.Conv2d):
    r"""
    A ConvReLU2d module is a fused module of Conv2d and ReLU, attached with
    FakeQuantize modules for weight for
    quantization aware training.

    We combined the interface of :class:`~torch.nn.Conv2d` and
    :class:`~torch.nn.BatchNorm2d`.

    Attributes:
        weight_fake_quant: fake quant module for weight

    """
    _FLOAT_MODULE = ...
    def __init__(self, in_channels, out_channels, kernel_size, stride=..., padding=..., dilation=..., groups=..., bias=..., padding_mode=..., qconfig=...) -> None:
        ...
    
    def forward(self, input):
        ...
    
    @classmethod
    def from_float(cls, mod):
        ...
    


def update_bn_stats(mod):
    ...

def freeze_bn_stats(mod):
    ...

