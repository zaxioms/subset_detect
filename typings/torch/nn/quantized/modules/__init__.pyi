"""
This type stub file was generated by pyright.
"""

import torch
from torch.nn.modules.pooling import MaxPool2d
from .activation import ELU, Hardswish, ReLU, ReLU6
from .batchnorm import BatchNorm2d, BatchNorm3d
from .normalization import GroupNorm, InstanceNorm1d, InstanceNorm2d, InstanceNorm3d, LayerNorm
from .conv import Conv1d, Conv2d, Conv3d, ConvTranspose1d, ConvTranspose2d
from .linear import Linear
from .embedding_ops import Embedding, EmbeddingBag
from .functional_modules import FloatFunctional, QFunctional

"""
This type stub file was generated by pyright.
"""
class Quantize(torch.nn.Module):
    r"""Quantizes an incoming tensor

    Args:
     `scale`: scale of the output Quantized Tensor
     `zero_point`: zero_point of output Quantized Tensor
     `dtype`: data type of output Quantized Tensor

    Attributes:
      `scale`, `zero_point`, `dtype`

    Examples::
        >>> t = torch.tensor([[1., -1.], [1., -1.]])
        >>> scale, zero_point, dtype = 1.0, 2, torch.qint8
        >>> qm = Quantize(scale, zero_point, dtype)
        >>> qt = qm(t)
        >>> print(qt)
        tensor([[ 1., -1.],
                [ 1., -1.]], size=(2, 2), dtype=torch.qint8, scale=1.0, zero_point=2)
    """
    scale: torch.Tensor
    zero_point: torch.Tensor
    def __init__(self, scale, zero_point, dtype) -> None:
        ...
    
    def forward(self, X):
        ...
    
    @staticmethod
    def from_float(mod):
        ...
    
    def extra_repr(self):
        ...
    


class DeQuantize(torch.nn.Module):
    r"""Dequantizes an incoming tensor

    Examples::
        >>> input = torch.tensor([[1., -1.], [1., -1.]])
        >>> scale, zero_point, dtype = 1.0, 2, torch.qint8
        >>> qm = Quantize(scale, zero_point, dtype)
        >>> quantized_input = qm(input)
        >>> dqm = DeQuantize()
        >>> dequantized = dqm(quantized_input)
        >>> print(dequantized)
        tensor([[ 1., -1.],
                [ 1., -1.]], dtype=torch.float32)
    """
    def __init__(self) -> None:
        ...
    
    def forward(self, Xq):
        ...
    
    @staticmethod
    def from_float(mod):
        ...
    


