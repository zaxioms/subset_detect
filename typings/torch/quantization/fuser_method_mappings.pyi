"""
This type stub file was generated by pyright.
"""

import torch.nn as nn
import torch.nn.intrinsic as nni
from typing import Callable, Dict, Tuple, Union

"""
This type stub file was generated by pyright.
"""
def fuse_conv_bn(conv, bn):
    r"""Given the conv and bn modules, fuses them and returns the fused module

    Args:
        conv: Module instance of type conv2d/conv3d
        bn: Spatial BN instance that needs to be fused with the conv

    Examples::

        >>> m1 = nn.Conv2d(10, 20, 3)
        >>> b1 = nn.BatchNorm2d(20)
        >>> m2 = fuse_conv_bn(m1, b1)
    """
    ...

def fuse_conv_bn_relu(conv, bn, relu):
    r"""Given the conv and bn modules, fuses them and returns the fused module

    Args:
        conv: Module instance of type conv2d/conv3d
        bn: Spatial BN instance that needs to be fused with the conv

    Examples::

        >>> m1 = nn.Conv2d(10, 20, 3)
        >>> b1 = nn.BatchNorm2d(20)
        >>> m2 = fuse_conv_bn(m1, b1)
    """
    ...

OP_LIST_TO_FUSER_METHOD: Dict[Tuple, Union[nn.Sequential, Callable]] = { (nn.Conv1d, nn.BatchNorm1d): fuse_conv_bn,(nn.Conv1d, nn.BatchNorm1d, nn.ReLU): fuse_conv_bn_relu,(nn.Conv2d, nn.BatchNorm2d): fuse_conv_bn,(nn.Conv2d, nn.BatchNorm2d, nn.ReLU): fuse_conv_bn_relu,(nn.Conv3d, nn.BatchNorm3d): fuse_conv_bn,(nn.Conv3d, nn.BatchNorm3d, nn.ReLU): fuse_conv_bn_relu,(nn.Conv1d, nn.ReLU): nni.ConvReLU1d,(nn.Conv2d, nn.ReLU): nni.ConvReLU2d,(nn.Conv3d, nn.ReLU): nni.ConvReLU3d,(nn.Linear, nn.ReLU): nni.LinearReLU,(nn.BatchNorm2d, nn.ReLU): nni.BNReLU2d,(nn.BatchNorm3d, nn.ReLU): nni.BNReLU3d }
def register_fuser_method(op_list, fuser_method):
    ''' Register a fuser method for a tuple of ops, will be called
    during fusion step
    '''
    ...

def get_fuser_method(op_list):
    ''' Get fuser method for the given list of module types,
    return None if fuser method does not exist
    '''
    ...

