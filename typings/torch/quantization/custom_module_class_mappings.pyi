"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
OBSERVED_CUSTOM_MODULE_CLASS_MAPPINGS = dict()
def register_observed_custom_module_mapping(float_custom_module_class, observed_custom_module_class):
    """ Register a mapping from `float_custom_module_class` to
    `observed_custom_module_class`
    `observed_custom_module_class` will have a `from_float` classmethod,
    which will return an observed custom module instance given
    a float custom module instance.
    This will be used in prepare step of post training static quantization or
    quantization aware training
    """
    ...

def get_observed_custom_module_class(float_custom_module_class):
    """ Get the corresponding observed module class for a given
    float custom module.
    """
    ...

QUANTIZED_CUSTOM_MODULE_CLASS_MAPPINGS = dict()
def register_quantized_custom_module_mapping(float_custom_module_class, quantized_custom_module_class):
    """ Register a mapping from `float_custom_module_class` to `quantized_custom_module_class`
    A quantized custom module class should accept quantized input and
    return quantized output. (we can relax this condition in the
    future if there is a need)
    `quantized_custom_module_class` will have a `from_observed` classmethod,
    which will return an quantized custom module instance given
    a observed custom module instance.
    This will be used in prepare step of post training static quantization or
    quantization aware training
    """
    ...

def get_quantized_custom_module_class(float_custom_module_class):
    """ Get the corresponding quantized module class for a given
    float custom module.
    """
    ...

def is_custom_module_class(module_class):
    """ Check if a given module class is a custom module class
    """
    ...

def mark_observed_custom_module(module, custom_module_class):
    """ Mark a module as observed custom module, so that
    it can be identified during convert step
    """
    ...

def is_observed_custom_module(module):
    """ Check if a module is marked as observed custom module
    or not
    """
    ...

