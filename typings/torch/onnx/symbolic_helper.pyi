"""
This type stub file was generated by pyright.
"""

import torch

_sum = sum
def parse_args(*arg_descriptors):
    ...

def assert_training_mode(op_mode, op_name):
    ...

_default_onnx_opset_version = 9
_onnx_master_opset = 10
_onnx_stable_opsets = [7, 8, 9, 10, 11, 12]
_export_onnx_opset_version = _default_onnx_opset_version
_operator_export_type = None
_training_mode = None
_onnx_shape_inference = False
cast_pytorch_to_onnx = { 'Byte': torch.onnx.TensorProtoDataType.UINT8,'Char': torch.onnx.TensorProtoDataType.INT8,'Double': torch.onnx.TensorProtoDataType.DOUBLE,'Float': torch.onnx.TensorProtoDataType.FLOAT,'Half': torch.onnx.TensorProtoDataType.FLOAT16,'Int': torch.onnx.TensorProtoDataType.INT32,'Long': torch.onnx.TensorProtoDataType.INT64,'Short': torch.onnx.TensorProtoDataType.INT16,'Bool': torch.onnx.TensorProtoDataType.BOOL,'ComplexFloat': torch.onnx.TensorProtoDataType.COMPLEX64,'ComplexDouble': torch.onnx.TensorProtoDataType.COMPLEX128,'Undefined': torch.onnx.TensorProtoDataType.UNDEFINED }
scalar_name_to_pytorch = { 'uint8_t': 'Byte','int8_t': 'Char','double': 'Double','float': 'Float','half': 'Half','int': 'Int','int64_t': 'Long','int16_t': 'Short','bool': 'Bool','complex64': 'ComplexFloat','complex128': 'ComplexDouble' }
scalar_type_to_pytorch_type = [torch.uint8, torch.int8, torch.short, torch.int, torch.int64, torch.half, torch.float, torch.double, torch.complex32, torch.complex64, torch.complex128, torch.bool]
scalar_type_to_onnx = [cast_pytorch_to_onnx["Byte"], cast_pytorch_to_onnx["Char"], cast_pytorch_to_onnx["Short"], cast_pytorch_to_onnx["Int"], cast_pytorch_to_onnx["Long"], cast_pytorch_to_onnx["Half"], cast_pytorch_to_onnx["Float"], cast_pytorch_to_onnx["Double"], cast_pytorch_to_onnx["Undefined"], cast_pytorch_to_onnx["ComplexFloat"], cast_pytorch_to_onnx["ComplexDouble"], cast_pytorch_to_onnx["Bool"]]
_quantized_ops = set()
