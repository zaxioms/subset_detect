"""
This type stub file was generated by pyright.
"""

import re
import contextlib

r"""
The torch.onnx module contains functions to export models into the ONNX
IR format.  These models can be loaded with the ONNX library and then
converted to models which run on other deep learning frameworks.
"""
__IN_ONNX_EXPORT = False
def is_in_onnx_export():
    ...

@contextlib.contextmanager
def select_model_mode_for_export(model, mode):
    ...

def export(model, args, f, export_params=..., verbose=..., training=..., input_names=..., output_names=..., aten=..., export_raw_ir=..., operator_export_type=..., opset_version=..., _retain_param_name=..., do_constant_folding=..., example_outputs=..., strip_doc_string=..., dynamic_axes=..., keep_initializers_as_inputs=..., custom_opsets=..., enable_onnx_checker=..., use_external_data_format=...):
    ...

def warn_on_static_input_change(input_states):
    ...

def export_to_pretty_string(model, args, f, export_params=..., verbose=..., training=..., input_names=..., output_names=..., aten=..., export_raw_ir=..., operator_export_type=..., export_type=..., example_outputs=..., google_printer=..., opset_version=..., _retain_param_name=..., keep_initializers_as_inputs=..., custom_opsets=..., add_node_names=..., do_constant_folding=...):
    ...

attr_pattern = re.compile("^(.+)_([ifstgz])$")
def register_custom_op_symbolic(symbolic_name, symbolic_fn, opset_version):
    ...

