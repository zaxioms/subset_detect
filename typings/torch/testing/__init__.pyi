"""
This type stub file was generated by pyright.
"""

import torch
import random
import math
from typing import List, Optional, Tuple, Union, cast

"""
This type stub file was generated by pyright.
"""
FileCheck = torch._C.FileCheck
rand_like = torch.rand_like
randn_like = torch.randn_like
def is_integral(dtype: torch.dtype) -> bool:
    ...

_compare_return_type = Tuple[bool, Optional[str]]
def assert_allclose(actual, expected, rtol=..., atol=..., equal_nan=..., msg=...) -> None:
    ...

def make_non_contiguous(tensor: torch.Tensor) -> torch.Tensor:
    ...

class _dispatch_dtypes(tuple):
    def __add__(self, other):
        ...
    


_floating_types = _dispatch_dtypes((torch.float32, torch.float64))
def floating_types():
    ...

_floating_types_and_half = _floating_types + (torch.half, )
def floating_types_and_half():
    ...

def floating_types_and(*dtypes):
    ...

_floating_and_complex_types = _floating_types + (torch.cfloat, torch.cdouble)
def floating_and_complex_types():
    ...

def floating_and_complex_types_and(*dtypes):
    ...

_integral_types = _dispatch_dtypes((torch.uint8, torch.int8, torch.int16, torch.int32, torch.int64))
def integral_types():
    ...

def integral_types_and(*dtypes):
    ...

_all_types = _floating_types + _integral_types
def all_types():
    ...

def all_types_and(*dtypes):
    ...

_complex_types = (torch.cfloat, torch.cdouble)
def complex_types():
    ...

_all_types_and_complex = _all_types + _complex_types
def all_types_and_complex():
    ...

def all_types_and_complex_and(*dtypes):
    ...

_all_types_and_half = _all_types + (torch.half, )
def all_types_and_half():
    ...

def get_all_dtypes(include_half=..., include_bfloat16=..., include_bool=..., include_complex=..., include_complex32=...) -> List[torch.dtype]:
    ...

def get_all_math_dtypes(device) -> List[torch.dtype]:
    ...

def get_all_complex_dtypes(include_complex32=...) -> List[torch.dtype]:
    ...

def get_all_int_dtypes() -> List[torch.dtype]:
    ...

def get_all_fp_dtypes(include_half=..., include_bfloat16=...) -> List[torch.dtype]:
    ...

def get_all_device_types() -> List[str]:
    ...

_default_tolerances = { 'float64': (0.00001, 1e-8),'float32': (0.0001, 0.00001),'float16': (0.001, 0.001) }
